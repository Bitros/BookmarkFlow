function send_prompt(e){chrome.notifications.create({message:e,type:"basic",title:"Bookmark Flow Prompt",iconUrl:"/icons/bf128x128.png"})}function r_search_from_top(e,t,o){if(t[e.title]=o?{bf_internal_url:e.url,bf_internal_index:e.index,bf_internal_id:e.id}:{bf_internal_url:e.url,bf_internal_index:e.index},e.children)for(let n=0;n<e.children.length;n++){const r=e.children[n];t[e.title][r.title]={url:r.url,index:r.index};const s=t[e.title];r_search_from_top(r,s,o)}}function reconstruct_bookmark_tree_node(e,t){const o=e[0];o.title="root";for(let e=0;e<o.children.length;e++){const t=o.children[e];"Bookmarks bar"==t.title||"Favorites bar"==t.title?t.title="Bar":"Other bookmarks"!=t.title&&"Other favorites"!=t.title||(t.title="Other")}const n={};return r_search_from_top(o,n,t),n}function r_sync(e,t,o,n){for(let r in e)if(-1==r.indexOf("bf_internal_"))if(t[r]){if("object"==typeof e[r]){const s=e[r],a=t[r];n&&s.bf_internal_url&&a.bf_internal_url&&s.bf_internal_url!==a.bf_internal_url&&(console.debug(`update bookmark ${r}`),chrome.bookmarks.update(a.bf_internal_id,{url:s.bf_internal_url})),n&&s.bf_internal_index&&a.bf_internal_index&&s.bf_internal_index!==a.bf_internal_index&&(console.debug(`move bookmark ${r}`),chrome.bookmarks.move(a.bf_internal_id,{index:s.bf_internal_index})),r_sync(s,a,o,n)}}else o(r,e[r],t.bf_internal_id)}function del(e,t,o){console.debug(`delete local bookmarks title:${e}, bookmark:${JSON.stringify(t)}`),t.bf_internal_url?chrome.bookmarks.remove(t.bf_internal_id,()=>{console.debug(`remove bookmark ${e}`)}):chrome.bookmarks.removeTree(t.bf_internal_id,()=>{console.debug(`remove bookmark folder ${e}`)})}function add(e,t,o){t.bf_internal_url?(console.debug(`add local bookmarks title:${e}, bookmark:${JSON.stringify(t)}`),chrome.bookmarks.create({title:e,url:t.bf_internal_url,index:t.bf_internal_index,parentId:o})):r_add(e,t,o)}async function r_add(e,t,o){const n=await chrome.bookmarks.create({title:e,url:t.bf_internal_url,index:t.bf_internal_index,parentId:o});console.debug(`add local bookmarks title:${e}, bookmark:${JSON.stringify(t)}`);const r=n.id;for(let e in t)-1==e.indexOf("bf_internal_")&&r_add(e,t[e],r)}function sync(e,t){clear_bookmark_listener(),r_sync(e,t,del),r_sync(t,e,add,!0),setTimeout(add_bookmark_listener,1e3)}async function create_gist(){const e=await get_octokit();if(e){const t=await chrome.bookmarks.getTree(),o=Date.now().toString();e.request("POST /gists",{public:!1,files:{"bookmark_flow_gist.bf":{content:JSON.stringify(reconstruct_bookmark_tree_node(t,!1))},"bookmark_flow_gist.bft":{content:o}}}).then(e=>{chrome.storage.local.set({gh_gist_id:e.data.id},()=>{console.debug("set gh_gist_id : "+e.data.id)}),chrome.storage.local.set({last_update_time:o},()=>{console.debug("set last_update_time : "+o)}),send_prompt("Configured and started")}).catch(e=>{console.debug(JSON.stringify(e));let t="";e.response&&e.response.data&&(t=e.response.data.message),send_prompt(e.status+" "+t)})}}async function check_gist(){const e=await get_octokit();e&&e.request("GET /gists").then(e=>{let t=!1;const o=e.data;for(let e=0;e<o.length;e++){const n=o[e],r=n.files;if(r["bookmark_flow_gist.bf"]){console.debug("gist exits"),chrome.storage.local.set({gh_gist_id:n.id},()=>{console.debug("set gh_gist_id : "+n.id)}),fetch(r["bookmark_flow_gist.bf"].raw_url).then(async e=>{const t=await e.text(),o=await chrome.bookmarks.getTree();let n=reconstruct_bookmark_tree_node(o,!1);const r=JSON.stringify(n);r!==t&&(n=reconstruct_bookmark_tree_node(o,!0),sync(n,JSON.parse(t)))}).catch(e=>{console.debug(JSON.stringify(e))}),fetch(r["bookmark_flow_gist.bft"].raw_url).then(async e=>{const t=await e.text();chrome.storage.local.set({last_update_time:t},()=>{console.debug("set last_update_time : "+t)})}).catch(e=>{console.debug(JSON.stringify(e))}),t=!0,send_prompt("Configured and started");break}}t||(console.debug("no gist found and create new"),create_gist())}).catch(e=>{console.debug(JSON.stringify(e));let t="";e.response&&e.response.data&&(t=e.response.data.message),send_prompt(e.status+" "+t)})}async function get_octokit(){return global_octokit||await recreate_octokit(),global_octokit}async function recreate_octokit(){const e=await chrome.storage.local.get(["gh_token"]),t=e.gh_token;t?(console.debug("get a token and init octokit now.",t),global_octokit=new Octokit({auth:t})):(console.debug("no token and send notification"),send_prompt("Please enter Github token"))}function openPopup(){chrome.tabs.create({active:!0,url:"popup/popup.min.html"})}async function direct_push(){const e=await get_octokit();if(e){const t=await chrome.storage.local.get(["gh_gist_id"]);if(t.gh_gist_id){const o=await chrome.bookmarks.getTree(),n=Date.now().toString();e.request("PATCH /gists/{gist_id}",{gist_id:t.gh_gist_id,files:{"bookmark_flow_gist.bf":{content:JSON.stringify(reconstruct_bookmark_tree_node(o,!1))},"bookmark_flow_gist.bft":{content:n}}}).then(e=>{chrome.storage.local.set({last_update_time:n},()=>{console.debug("set last_update_time : "+n)}),console.debug(e.status)}).catch(e=>{console.debug(JSON.stringify(e));let t="";e.response&&e.response.data&&(t=e.response.data.message),send_prompt(e.status+" "+t)})}else send_prompt("No gist id found. Maybe you clear the local storage cache")}}async function push(e,t){console.debug(`Detect bookmark changing event ${e}, ${JSON.stringify(t)}`);const o=await chrome.storage.local.get(["gh_gist_id"]);o.gh_gist_id||(console.debug("No gist id found. Checking..."),check_gist()),task_id&&clearTimeout(task_id),task_id=setTimeout(direct_push,1500)}async function pull(){const e=await get_octokit();if(e){const t=await chrome.storage.local.get(["gh_gist_id"]);if(t.gh_gist_id){const o=await e.request("GET /gists/{gist_id}",{gist_id:t.gh_gist_id}).then(e=>e.data.files).catch(e=>{console.debug(JSON.stringify(e))}),n=o["bookmark_flow_gist.bft"].content,r=await chrome.storage.local.get(["last_update_time"]);if(r.last_update_time&&n===r.last_update_time)console.debug(n),console.debug("No updates detected with last_update_time");else{const e=await chrome.bookmarks.getTree();let t=reconstruct_bookmark_tree_node(e,!1);const r=JSON.stringify(t),s=o["bookmark_flow_gist.bf"].content;r===s?console.debug("No updates detected with bookmarks"):(t=reconstruct_bookmark_tree_node(e,!0),sync(t,JSON.parse(s))),chrome.storage.local.set({last_update_time:n},()=>{console.debug("set last_update_time : "+n)})}}else console.debug("No gist id found.")}}function add_bookmark_listener(){chrome.bookmarks.onChanged.addListener(push),chrome.bookmarks.onChildrenReordered.addListener(push),chrome.bookmarks.onCreated.addListener(push),chrome.bookmarks.onImportEnded.addListener(push),chrome.bookmarks.onMoved.addListener(push),chrome.bookmarks.onRemoved.addListener(push)}async function clear_bookmark_listener(){await chrome.bookmarks.onChanged.removeListener(push),await chrome.bookmarks.onChildrenReordered.removeListener(push),await chrome.bookmarks.onCreated.removeListener(push),await chrome.bookmarks.onImportEnded.removeListener(push),await chrome.bookmarks.onMoved.removeListener(push),await chrome.bookmarks.onRemoved.removeListener(push)}import{Octokit}from"https://cdn.skypack.dev/@octokit/core";let global_octokit,task_id;chrome.runtime.onMessage.addListener((e,t,o)=>{"pop"===e.from&&(e.sync_now?pull():(console.debug("token added & changed and start to check Gist. ",e),recreate_octokit(),check_gist()),o("OK"))}),chrome.runtime.onInstalled.addListener(openPopup),chrome.notifications.onClicked.addListener(openPopup),chrome.alarms.onAlarm.addListener(pull),add_bookmark_listener();